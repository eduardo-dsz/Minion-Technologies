{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import streamlit as st\
import pandas as pd\
import matplotlib.pyplot as plt\
from sklearn.linear_model import LinearRegression\
from sklearn.ensemble import IsolationForest\
import smtplib\
from email.message import EmailMessage\
from io import BytesIO\
\
# ------------------- PAGE CONFIG -------------------\
st.set_page_config(page_title="Minion Anomaly Detector", layout="wide")\
\
# ------------------- STYLING -------------------\
st.markdown("""\
    <style>\
    body \{\
        background-color: #7b8b82;\
    \}\
    .main \{\
        background-color: #7b8b82;\
    \}\
    .reportview-container .markdown-text-container \{\
        color: #f0f0f0;\
    \}\
    .css-1aumxhk \{\
        background-color: #2e2e2e;\
    \}\
    .block-container \{\
        padding-top: 2rem;\
    \}\
    .stButton > button \{\
        color: white;\
        background-color: #444;\
        border-radius: 10px;\
        padding: 0.5rem 1rem;\
    \}\
    .stRadio > div \{\
        background-color: #444;\
        color: white;\
        border-radius: 10px;\
        padding: 0.5rem;\
    \}\
    </style>\
""", unsafe_allow_html=True)\
\
# ------------------- SIDEBAR -------------------\
with st.sidebar:\
    st.title("\uc0\u9776  Minion Tech")\
    st.markdown("\uc0\u55356 \u57312  **Home**")\
    st.markdown("\uc0\u55357 \u56522  **Menu**")\
    st.markdown("\uc0\u55357 \u56542  **Contact**")\
\
# ------------------- HEADER -------------------\
st.markdown("<h1 style='text-align:center; color:white;'>\uc0\u10024  Minion Technologies</h1>", unsafe_allow_html=True)\
\
# ------------------- FILE UPLOAD -------------------\
uploaded_file = st.file_uploader("\uc0\u55357 \u56514  Upload wind turbine CSV", type="csv")\
\
if uploaded_file:\
    with st.spinner("\uc0\u55357 \u56589  Processing..."):\
        df = pd.read_csv(uploaded_file)\
\
        # ----- CLEANING -----\
        df['Date/Time'] = pd.to_datetime(df['Date/Time'], format='%d %m %Y %H:%M')\
        df.rename(columns=\{'Date/Time': 'date', 'LV ActivePower (kW)': 'output_kwh'\}, inplace=True)\
        df['day_of_year'] = df['date'].dt.dayofyear\
\
        # ----- ANOMALY DETECTION -----\
        model = IsolationForest(contamination=0.05)\
        df['anomaly'] = model.fit_predict(df[['output_kwh']]) == -1\
\
        # ----- REGRESSION -----\
        lr = LinearRegression()\
        lr.fit(df[['day_of_year']], df['output_kwh'])\
        df['predicted'] = lr.predict(df[['day_of_year']])\
\
        anomalies = df[df['anomaly']]\
\
        # ----- PLOT -----\
        fig, ax = plt.subplots(figsize=(12,6))\
        ax.plot(df['date'], df['output_kwh'], label="Actual", color="blue")\
        ax.plot(df['date'], df['predicted'], label="Predicted", color="green")\
        if not anomalies.empty:\
            ax.scatter(anomalies['date'], anomalies['output_kwh'], color='red', label="Anomaly", s=60)\
        ax.set_title("Output with Anomalies")\
        ax.set_xlabel("Date")\
        ax.set_ylabel("kW")\
        ax.legend()\
        ax.grid(True)\
\
        # ----- DISPLAY -----\
        col1, col2 = st.columns(2)\
        with col1:\
            st.subheader("\uc0\u55357 \u56522  Data Summary")\
            st.write(f"\'95 Avg Output: \{df['output_kwh'].mean():.2f\} kW")\
            st.write(f"\'95 Peak Output: \{df['output_kwh'].max():.2f\} kW")\
            st.write(f"\'95 Anomalies Found: \{len(anomalies)\}")\
        with col2:\
            st.subheader("\uc0\u55357 \u56520  Output Chart")\
            st.pyplot(fig)\
\
        # ----- ALERT -----\
        st.markdown("### \uc0\u55357 \u57000  Anomaly Alert")\
        if not anomalies.empty:\
            st.info("\uc0\u55357 \u56596  Action Required: Anomalies detected.")\
            st.dataframe(anomalies[['date', 'output_kwh']])\
            st.radio("Export anomaly to Slack group?", ["Yes", "No"], index=1)\
\
        # ----- EMAIL EXPORT -----\
        st.markdown("### \uc0\u55357 \u56548  Export to Email")\
\
        email_address = st.text_input("Enter recipient email address")\
        if st.button("Send Email"):\
            if email_address:\
                # Save CSV to buffer\
                buffer = BytesIO()\
                df.to_csv(buffer, index=False)\
                buffer.seek(0)\
\
                # Compose email\
                msg = EmailMessage()\
                msg['Subject'] = 'Wind Turbine Report'\
                msg['From'] = 'your_email@gmail.com'  # CHANGE THIS\
                msg['To'] = email_address\
                msg.set_content(f"""\
                Hello,\
\
                Please find the attached wind turbine anomaly report.\
                - Average output: \{df['output_kwh'].mean():.2f\} kW\
                - Anomalies: \{len(anomalies)\}\
\
                Minion Technologies\
                """)\
\
                msg.add_attachment(buffer.read(), maintype='application', subtype='csv', filename="report.csv")\
\
                try:\
                    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:\
                        smtp.login('your_email@gmail.com', 'your_app_password')  # CHANGE THIS\
                        smtp.send_message(msg)\
                    st.success("\uc0\u9989  Email sent successfully!")\
                except Exception as e:\
                    st.error(f"\uc0\u10060  Failed to send email: \{e\}")\
            else:\
                st.warning("\uc0\u55357 \u56551  Please enter a valid email address.")\
\
        # ----- DOWNLOAD BUTTON -----\
        st.download_button("\uc0\u11015  Download Results", df.to_csv(index=False), "results.csv", "text/csv")\
else:\
    st.warning("\uc0\u55357 \u56514  Please upload a CSV file.")\
}